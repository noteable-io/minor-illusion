"""Initial

Revision ID: 128a654019d2
Revises: 
Create Date: 2021-11-04 20:55:07.442666

"""
import uuid

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "128a654019d2"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # Mostly auto-generated tables with alembic revision --autogenerate.
    # Some manual tweaks for default values inherited from BaseDAO
    # that didn't seem to get picked up by autogenerate
    user_table = op.create_table(
        "users",
        sa.Column(
            "id", postgresql.UUID(as_uuid=True), default=uuid.uuid4, nullable=False
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            default=sa.func.now(),
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("password", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=True)
    todo_table = op.create_table(
        "todo",
        sa.Column(
            "id", postgresql.UUID(as_uuid=True), default=uuid.uuid4, nullable=False
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            default=sa.func.now(),
            nullable=False,
        ),
        sa.Column("title", sa.String(), nullable=True),
        sa.Column("content", sa.String(), nullable=True),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_todo_id"), "todo", ["id"], unique=True)
    op.create_index(op.f("ix_todo_user_id"), "todo", ["user_id"], unique=False)

    # Seed user data, user1 -> user10, all with password "pass"
    users = []
    for i in range(1, 11):
        row = {"name": f"user{i}", "password": "pass", "id": uuid.UUID(int=i)}
        users.append(row)
    op.bulk_insert(user_table, users)

    # Seed three todo items, all for user1
    op.bulk_insert(
        todo_table,
        [
            {
                "user_id": uuid.UUID(int=1),
                "title": "Note 1",
                "content": "My first Note",
            },
            {
                "user_id": uuid.UUID(int=1),
                "title": "Note 2",
                "content": "Edit this Note",
            },
            {
                "user_id": uuid.UUID(int=1),
                "title": "Note 3",
                "content": "Delete this Note",
            },
        ],
    )


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_todo_user_id"), table_name="todo")
    op.drop_index(op.f("ix_todo_id"), table_name="todo")
    op.drop_table("todo")
    op.drop_index(op.f("ix_user_id"), table_name="user")
    op.drop_table("users")
    # ### end Alembic commands ###
